[comment encoding = UTF-8 /]
[module generateDataWriterListener('http://www.example.org/ddsMetamodel')]

[import CppDdsGenerator::requests::ddsModel2Code /]
[import CppDdsGenerator::requests::dataWriterStatus2Code /]

[template public generateDataWriterListener(aDdsDataWriterListener : DdsDataWriterListener, srcPath : String, packageName : String, dataStructure : DdsDataStructure, systemName : String)]

[file (srcPath.concat(aDdsDataWriterListener.name.toUpperFirst()).concat('.cpp'), false, 'UTF-8')]
#ifndef __[aDdsDataWriterListener.name.toUpper()/]__
#define __[aDdsDataWriterListener.name.toUpper()/]__

#include "[systemName/].h"
#include "[systemName/]_DCPS.hpp"
#include <iostream>

using namespace std;
using namespace dds::sub;
using namespace [for (aDdsDataModule : DdsDataModule | getModulesHierarchy(dataStructure)) separator('::')][aDdsDataModule.moduleName/][/for];
using namespace dds::core::status;

//[protected ('User defined using namespace and code')]
//[/protected]

namespace [packageName/]
{
  class [aDdsDataWriterListener.name.toUpperFirst()/] : public virtual NoOpDataWriterListener<[dataStructure.structureName/]>
  {
    [for (aStatus : DataWriterStatus | aDdsDataWriterListener.listenedStatus)]
    	[getMethodDefinition(aStatus, dataStructure.structureName)/]
    {
      //[protected ('Method body')]
      //[/protected]
    }
    [/for]
  };
}
#endif
[/file]
[/template]

[comment encoding = UTF-8 /]
[module generateDomainParticipant('http://www.example.org/ddsMetamodel')]

[import Java5DdsGenerator::main::generatePublisherListener /]
[import Java5DdsGenerator::requests::publisherStatus2Code /]
[import Java5DdsGenerator::requests::ddsModel2Code /]
[import Java5DdsGenerator::main::generateTopicListener /]
[import Java5DdsGenerator::requests::topicStatus2Code /]
[import Java5DdsGenerator::main::generateDataWriterListener /]
[import Java5DdsGenerator::requests::dataWriterStatus2Code /]
[import Java5DdsGenerator::main::generateSubscriberListener /]
[import Java5DdsGenerator::requests::subscriberStatus2Code /]
[import Java5DdsGenerator::main::generateDataReaderListener /]
[import Java5DdsGenerator::requests::dataReaderStatus2Code /]

[template public generateDomainParticipant(aDdsApplication : DdsApplication, hostName : String, applicationName : String, systemName : String)]
[for (aDdsDomainParticipant  : DdsDomainParticipant | aDdsApplication.domainParticipants)]
[for (aDdsPublisher : DdsPublisher | aDdsDomainParticipant.ddspublisher)]
[if (aDdsPublisher.publisherQosProfile = null)] 
PublisherQos [aDdsPublisher.publisherName/]Qos = this.[aDdsDomainParticipant.domainParticipantName/].getDefaultPublisherQos();
[else]
PublisherQos [aDdsPublisher.publisherName/]Qos = qosProvider.getPublisherQos("[aDdsPublisher.publisherQosProfile.profileName/]");
[/if]
[if (aDdsPublisher.publisherListener <> null)]
[generatePublisherListener(aDdsPublisher.publisherListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase())/]
[aDdsPublisher.publisherListener.name.toUpperFirst()/] [aDdsPublisher.publisherName/]Listener = new [aDdsPublisher.publisherListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsPublisher.publisherName/]Status = new HashSet<>();
[for (aStatus : PublisherStatus | aDdsPublisher.publisherListener.listenedStatus)]
[aDdsPublisher.publisherName/]Status.add([getPublisherStatusClassName(aStatus)/]Status.class);
[/for]
[else]
PublisherListener [aDdsPublisher.publisherName/]Listener = null;
Collection<Class<? extends Status>> [aDdsPublisher.publisherName/]Status = new HashSet<>();
[/if]
this.[aDdsPublisher.publisherName/] = this.[aDdsDomainParticipant.domainParticipantName/].createPublisher([aDdsPublisher.publisherName/]Qos, [aDdsPublisher.publisherName/]Listener, [aDdsPublisher.publisherName/]Status);
[for (aDdsDataWriter : DdsDataWriter | aDdsPublisher.ddsdatawriter)]
[let aDdsTopic : DdsTopic = aDdsDataWriter.publiableTopic]
[if (aDdsTopic.topicQosProfile = null)]
TopicQos [aDdsTopic.topicName/]Qos = this.[aDdsDomainParticipant.domainParticipantName/].getDefaultTopicQos();
[else]
TopicQos [aDdsTopic.topicName/]Qos = qosProvider.getTopicQos("[aDdsTopic.topicQosProfile.profileName/]");
[/if]
[if (aDdsTopic.topicListener <> null)]
[generateTopicListener(aDdsTopic.topicListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase(), aDdsTopic.ddsdatastructure)/]
[aDdsTopic.topicListener.name.toUpperFirst()/] [aDdsTopic.topicName/]Listener = new [aDdsTopic.topicListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsTopic.topicName/]Status = new HashSet<>();
[for (aStatus : TopicStatus | aDdsTopic.topicListener.listenedStatus)]
[aDdsTopic.topicName/]Status.add([getTopicStatusClassName(aStatus)/]Status.class);
[/for]
[else]
TopicListener<[aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsTopic.topicName/]Listener = null;
Collection<Class<? extends Status>> [aDdsTopic.topicName/]Status = new HashSet<>();
this.[aDdsTopic.topicName/] = this.[aDdsDomainParticipant.domainParticipantName/].createTopic("[aDdsTopic.topicName/]", [aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/].class, [aDdsTopic.topicName/]Qos, [aDdsTopic.topicName/]Listener, [aDdsTopic.topicName/]Status);
[/if]
[/let]
[if (aDdsDataWriter.dataWriterQosProfile = null)]
DataWriterQos [aDdsDataWriter.dataWriterName/]Qos = this.[aDdsPublisher.publisherName/].copyFromTopicQos(this.[aDdsPublisher.publisherName/].getDefaultDataWriterQos(), this.[aDdsDataWriter.publiableTopic.topicName/].getQos());
[else]
DataWriterQos [aDdsDataWriter.dataWriterName/]Qos = qosProvider.getDataWriterQos("[aDdsDataWriter.dataWriterQosProfile.profileName/]");
[/if]
[if (aDdsDataWriter.dataWriterListener <> null)]
[generateDataWriterListener(aDdsDataWriter.dataWriterListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase(), aDdsDataWriter.publiableTopic.ddsdatastructure)/]
[aDdsDataWriter.dataWriterListener.name.toUpperFirst()/] [aDdsDataWriter.dataWriterName/]Listener = new [aDdsDataWriter.dataWriterListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsDataWriter.dataWriterName/]Status = new HashSet<>();
[for (aStatus : DataWriterStatus | aDdsDataWriter.dataWriterListener.listenedStatus)]
[aDdsDataWriter.dataWriterName/]Status.add([getDataWriterStatusClassName(aStatus)/]Status.class);
[/for]
[else]
DataWriterListener<[aDdsDataWriter.publiableTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsDataWriter.dataWriterName/]Listener = null;
Collection<Class<? extends Status>> [aDdsDataWriter.dataWriterName/]Status = new HashSet<>();
[/if]
this.[aDdsDataWriter.dataWriterName/] = this.[aDdsPublisher.publisherName/].createDataWriter(this.[aDdsDataWriter.publiableTopic.topicName/], [aDdsDataWriter.dataWriterName/]Qos, [aDdsDataWriter.dataWriterName/]Listener, [aDdsDataWriter.dataWriterName/]Status);
[/for]
[/for]
[for (aDdsSubscriber : DdsSubscriber | aDdsDomainParticipant.ddssubscriber)]
[if (aDdsSubscriber.subscriberQosProfile = null)]
SubscriberQos [aDdsSubscriber.subscriberName/]Qos = this.[aDdsDomainParticipant.domainParticipantName/].getDefaultSubscriberQos();
[else]
SubscriberQos [aDdsSubscriber.subscriberName/]Qos = qosProvider.getSubscriberQos("[aDdsSubscriber.subscriberQosProfile.profileName/]");
[/if]
[if (aDdsSubscriber.subscriberListener <> null)]
[generateSubscriberListener(aDdsSubscriber.subscriberListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase())/]
[aDdsSubscriber.subscriberListener.name.toUpperFirst()/] [aDdsSubscriber.subscriberName/]Listener = new [aDdsSubscriber.subscriberListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsSubscriber.subscriberName/]Status = new HashSet<>();
[for (aStatus : SubscriberStatus | aDdsSubscriber.subscriberListener.listenedStatus)]
[aDdsSubscriber.subscriberName/]Status.add([getSubscriberStatusClassName(aStatus)/]Status.class);
[/for]
[else]
SubscriberListener [aDdsSubscriber.subscriberName/]Listener = null;
Collection<Class<? extends Status>> [aDdsSubscriber.subscriberName/]Status = new HashSet<>();
[/if]
this.[aDdsSubscriber.subscriberName/] = this.[aDdsDomainParticipant.domainParticipantName/].createSubscriber([aDdsSubscriber.subscriberName/]Qos, [aDdsSubscriber.subscriberName/]Listener, [aDdsSubscriber.subscriberName/]Status);
[for (aDdsDataReader : DdsDataReader | aDdsSubscriber.ddsdatareader)]
[let aDdsTopic : DdsTopic = aDdsDataReader.readableTopic]
[if (aDdsTopic.topicQosProfile <> null)]
TopicQos [aDdsTopic.topicName/]Qos = qosProvider.getTopicQos("[aDdsTopic.topicQosProfile.profileName/]");
[else]
TopicQos [aDdsTopic.topicName/]Qos = this.[aDdsDomainParticipant.domainParticipantName/].getDefaultTopicQos();
[/if]
[if (aDdsTopic.topicListener <> null)]
[generateTopicListener(aDdsTopic.topicListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase(), aDdsTopic.ddsdatastructure)/]
[aDdsTopic.topicListener.name.toUpperFirst()/] [aDdsTopic.topicName/]Listener = new [aDdsTopic.topicListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsTopic.topicName/]Status = new HashSet<>();
[for (aStatus : TopicStatus | aDdsTopic.topicListener.listenedStatus)]
[aDdsTopic.topicName/]Status.add([getTopicStatusClassName(aStatus)/]Status.class);
[/for]
[else]
TopicListener<[aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsTopic.topicName/]Listener = null;
Collection<Class<? extends Status>> [aDdsTopic.topicName/]Status = new HashSet<>();
[/if]
this.[aDdsTopic.topicName/] = this.[aDdsDomainParticipant.domainParticipantName/].createTopic("[aDdsTopic.topicName/]", [aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/].class, [aDdsTopic.topicName/]Qos, [aDdsTopic.topicName/]Listener, [aDdsTopic.topicName/]Status);
[/let]
[if (aDdsDataReader.dataReaderQosProfile <> null)]
DataReaderQos [aDdsDataReader.dataReaderName/]Qos = qosProvider.getDataReaderQos("[aDdsDataReader.dataReaderQosProfile.profileName/]");
[else]
DataReaderQos [aDdsDataReader.dataReaderName/]Qos = this.[aDdsSubscriber.subscriberName/].copyFromTopicQos(this.[aDdsSubscriber.subscriberName/].getDefaultDataReaderQos(), this.[aDdsDataReader.readableTopic.topicName/].getQos());
[/if]
[if (aDdsDataReader.dataReaderListener <> null)]
[generateDataReaderListener(aDdsDataReader.dataReaderListener, systemName.concat('/').concat(hostName).concat('/src/').concat(applicationName.toLowerCase()).concat('/'), applicationName.toLowerCase(), aDdsDataReader.readableTopic.ddsdatastructure)/]
[aDdsDataReader.dataReaderListener.name.toUpperFirst()/] [aDdsDataReader.dataReaderName/]Listener = new [aDdsDataReader.dataReaderListener.name.toUpperFirst()/]();
Collection<Class<? extends Status>> [aDdsDataReader.dataReaderName/]Status = new HashSet<>();
[for (aStatus : DataReaderStatus | aDdsDataReader.dataReaderListener.listenedStatus)]
[aDdsDataReader.dataReaderName/]Status.add([getDataReaderStatusClassName(aStatus)/]Status.class);
[/for]
[else]
DataReaderListener<[aDdsDataReader.readableTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsDataReader.dataReaderName/]Listener = null;
Collection<Class<? extends Status>> [aDdsDataReader.dataReaderName/]Status = new HashSet<>();
[/if]
this.[aDdsDataReader.dataReaderName/] = this.[aDdsSubscriber.subscriberName/].createDataReader(this.[aDdsDataReader.readableTopic.topicName/], [aDdsDataReader.dataReaderName/]Qos, [aDdsDataReader.dataReaderName/]Listener, [aDdsDataReader.dataReaderName/]Status);
[/for]
[/for]
[/for]
[/template]

[comment encoding = UTF-8 /]
[module generateJavaCode('http://www.example.org/ddsMetamodel')]
[import Java5DdsGenerator::main::generateWaitsetDeclaration /]
[import Java5DdsGenerator::requests::domainParticipantStatus2Code /]
[import Java5DdsGenerator::requests::publisherStatus2Code /]
[import Java5DdsGenerator::requests::dataWriterStatus2Code /]
[import Java5DdsGenerator::requests::subscriberStatus2Code /]
[import Java5DdsGenerator::requests::topicStatus2Code /]
[import Java5DdsGenerator::requests::dataReaderStatus2Code /]
[import Java5DdsGenerator::main::generateWaitset /]
[import Java5DdsGenerator::main::generateParticipantListener /]
[import Java5DdsGenerator::main::generatePublisherListener /]
[import Java5DdsGenerator::main::generateDataWriterListener /]
[import Java5DdsGenerator::main::generateSubscriberListener /]
[import Java5DdsGenerator::main::generateDataReaderListener /]
[import Java5DdsGenerator::main::generateTopicListener /]
[import Java5DdsGenerator::requests::ddsModel2Code /]
[import Java5DdsGenerator::main::generateDomainParticipant /]

[template public generateJavaCode(aDdsSystem : DdsSystem)]
[for (aDdsHost : DdsHost | aDdsSystem.hosts)]
[for (aDdsApplication : DdsApplication | aDdsHost.applications)]
[file (aDdsSystem.systemName.concat('/').concat(aDdsHost.hostName).concat('/src/').concat(aDdsApplication.applicationName.toLowerCase()).concat('/').concat(aDdsApplication.applicationName.toUpperFirst()).concat('.java'), false, 'UTF-8')]
package [aDdsApplication.applicationName.toLowerCase()/];

import org.omg.dds.domain.DomainParticipant;
import org.omg.dds.domain.DomainParticipantQos;
import org.omg.dds.pub.PublisherQos;
import org.omg.dds.pub.DataWriterQos;
import org.omg.dds.sub.SubscriberQos;
import org.omg.dds.sub.DataReaderQos;
import org.omg.dds.topic.TopicQos;
import org.omg.dds.core.ServiceEnvironment;
import org.omg.dds.domain.DomainParticipantFactory;
import org.omg.dds.core.QosProvider;
import java.util.Collection;
import java.util.HashSet;
import org.omg.dds.core.status.Status;
import org.omg.dds.topic.Topic;
import org.omg.dds.pub.Publisher;
import org.omg.dds.pub.DataWriter;
import org.omg.dds.sub.Subscriber;
import org.omg.dds.sub.DataReader;
import org.omg.dds.domain.DomainParticipantListener;
import org.omg.dds.pub.PublisherListener;
import org.omg.dds.pub.DataWriterListener;
import org.omg.dds.sub.SubscriberListener;
import org.omg.dds.sub.DataReaderListener;
import org.omg.dds.topic.TopicListener;
[for (aDdsTopic : DdsTopic | aDdsSystem.topics)]
import [for (aDataModule : DdsDataModule | getModulesHierarchy(aDdsTopic.ddsdatastructure)) separator('.')][aDataModule.moduleName/][/for].[aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/];
[/for]
import org.omg.dds.core.status.*;
import org.omg.dds.sub.SampleState;
import org.omg.dds.sub.ViewState;
import org.omg.dds.sub.InstanceState;
import java.util.List;
import java.util.ArrayList;
[if (aDdsApplication.waitset <> null)]
import org.omg.dds.core.WaitSet;
import org.omg.dds.core.StatusCondition;
import org.omg.dds.sub.ReadCondition;
import org.omg.dds.sub.QueryCondition;
import org.omg.dds.core.GuardCondition;
[/if]
//[protected ('User defined imports')]
//[/protected]

//[protected ('class comments')]
//[/protected]
public class [aDdsApplication.applicationName.toUpperFirst()/] {

	private ServiceEnvironment env;
	[for (aDdsDomainParticipant : DdsDomainParticipant | aDdsApplication.domainParticipants)]
	//Attributes for participant [aDdsDomainParticipant.domainParticipantName/]
	private DomainParticipant [aDdsDomainParticipant.domainParticipantName/];
	[for (aDdsPublisher : DdsPublisher | aDdsDomainParticipant.ddspublisher)]
	private Publisher [aDdsPublisher.publisherName/];
	[for (aDdsDataWriter : DdsDataWriter | aDdsPublisher.ddsdatawriter)]
	private DataWriter<[aDdsDataWriter.publiableTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsDataWriter.dataWriterName/];
	[/for]
	[/for]
	[for (aDdsSubscriber : DdsSubscriber | aDdsDomainParticipant.ddssubscriber)]
	private Subscriber [aDdsSubscriber.subscriberName/];
	[for (aDdsDataReader : DdsDataReader | aDdsSubscriber.ddsdatareader)]
	private DataReader<[aDdsDataReader.readableTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsDataReader.dataReaderName/];
	[/for]
	[/for]
	[/for]
	[for (aDdsTopic : DdsTopic | aDdsSystem.topics)]
	Topic<[aDdsTopic.ddsdatastructure.structureName.toUpperFirst()/]> [aDdsTopic.topicName/];
	[/for]
	[if (aDdsApplication.waitset <> null)]
	[generateWaitsetDeclaration(aDdsApplication.waitset)/]
	[/if]
	// [protected('User defined attributes')]
	// [/protected]

	public [aDdsApplication.applicationName.toUpperFirst()/]() {
		System.setProperty(ServiceEnvironment.IMPLEMENTATION_CLASS_NAME_PROPERTY,
			"org.opensplice.dds.core.OsplServiceEnvironment");
		this.env = ServiceEnvironment.createInstance([aDdsApplication.applicationName.toUpperFirst()/].class.getClassLoader());
		DomainParticipantFactory dpf = DomainParticipantFactory.getInstance(env);
		[for (aDdsDomainParticipant : DdsDomainParticipant | aDdsApplication.domainParticipants)]
		
		//Initializing DomainParticipant [aDdsDomainParticipant.domainParticipantName/]
		[if (aDdsDomainParticipant.ddsdomainparticipantqosprofile = null)]
		DomainParticipantQos [aDdsDomainParticipant.domainParticipantName/]Qos = dpf.getDefaultParticipantQos();
		[else]
		QosProvider [aDdsDomainParticipant.domainParticipantName/]QosProvider = QosProvider.newQosProvider("file://./qos/[aDdsDomainParticipant.ddsdomainparticipantqosprofile.profileName/].xml", "[aDdsDomainParticipant.ddsdomainparticipantqosprofile.profileName/]", env);
		DomainParticipantQos [aDdsDomainParticipant.domainParticipantName/]Qos = [aDdsDomainParticipant.domainParticipantName/]QosProvider.getDomainParticipantQos();		
		[/if]
		[if (aDdsDomainParticipant.domainParticipantListener <> null)]
		[generateElement(aDdsDomainParticipant.domainParticipantListener, aDdsSystem.systemName.concat('/').concat(aDdsHost.hostName).concat('/src/').concat(aDdsApplication.applicationName.toLowerCase()).concat('/'), aDdsApplication.applicationName.toLowerCase())/]
		[aDdsDomainParticipant.domainParticipantListener.name.toUpperFirst()/] [aDdsDomainParticipant.domainParticipantName/]Listener = new [aDdsDomainParticipant.domainParticipantListener.name.toUpperFirst()/]();
		Collection<Class<? extends Status>> [aDdsDomainParticipant.domainParticipantName/]Status = new HashSet<>();
		[for (aDdsParticipantStatus : DomainParticipantStatus | aDdsDomainParticipant.domainParticipantListener.listenedStatus)]
		[aDdsDomainParticipant.domainParticipantName/]Status.add([getDomainParticipantStatusClassName(aDdsParticipantStatus)/]Status.class);
		[/for]
		[else]
		DomainParticipantListener [aDdsDomainParticipant.domainParticipantName/]Listener = null;
		Collection<Class<? extends Status>> [aDdsDomainParticipant.domainParticipantName/]Status = new HashSet<>();
		[/if]
		this.[aDdsDomainParticipant.domainParticipantName/] = dpf.createParticipant([aDdsDomainParticipant.domainId/], [aDdsDomainParticipant.domainParticipantName/]Qos, [aDdsDomainParticipant.domainParticipantName/]Listener, [aDdsDomainParticipant.domainParticipantName/]Status);
		[/for]
		
		this.populateApplication();
	}

    public [aDdsApplication.applicationName.toUpperFirst()/](ServiceEnvironment env, [for (aDomainParticipant : DdsDomainParticipant | aDdsApplication.domainParticipants) separator(', ')]DomainParticipant param[aDomainParticipant.domainParticipantName.toUpperFirst()/][/for]) {
		this.env = env;
		[for (aDomainParticipant : DdsDomainParticipant | aDdsApplication.domainParticipants)]
		this.[aDomainParticipant.domainParticipantName/] = param[aDomainParticipant.domainParticipantName.toUpperFirst()/];
		[/for]

		this.populateApplication();
    }

	private void populateApplication() {
		[generateDomainParticipant(aDdsApplication, aDdsHost.hostName, aDdsApplication.applicationName, aDdsSystem.systemName)/]

		[if (aDdsApplication.waitset <> null)]
		[generateWaitset(aDdsApplication.waitset)/]
		[/if]

		//[protected ('User attributes initialization')]
		//[/protected]
	}

	public void applicationBehavior() {
		//[protected ('Application behavior')]
		//[/protected]
	}

	// [protected('User defined methods')]
	// [/protected]

	public static void main(String['['/][']'/] args) {
		[aDdsApplication.applicationName.toUpperFirst()/] application = new [aDdsApplication.applicationName.toUpperFirst()/]();
		//[protected ('User attribute settings')]
		//[/protected]
		application.applicationBehavior();
	}
}
[/file]
[/for]
[/for]
[/template]
